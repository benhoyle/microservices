{
    "openapi": "3.0.0",
    "info": {
        "version": "0.0.1",
        "title": "Users Service",
        "description": "Swagger spec for documenting the users service"
    },
    "servers": [
        {
            "url": "http://192.168.99.101"
        }
    ],
    "paths": {
        "/users/ping": {
            "get": {
                "summary": "Just a sanity check",
                "responses": {
                    "200": {
                        "description": "Will return 'pong!'"
                    }
                }
            }
        },
        "/users": {
            "get": {
                "summary": "Returns all users",
                "responses": {
                    "200": {
                        "description": "user object"
                    }
                }
            },
            "post": {
                "summary": "Adds a new user",
                "requestBody": {
                    "description": "User to add",
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/user-full"
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ],
                "responses": {
                    "200": {
                        "description": "User added"
                    },
                    "400": {
                        "description": "Invalid payload."
                    },
                    "401": {
                        "description": "You do not have permission to do that."
                    }

                }
            },
        },
        "/users/{id}": {
            "get": {
                "summary": "Returns a user based on a single user ID",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of the user to fetch",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "user object"
                    },
                    "404": {
                        "description": "User does not exist."
                    }
                }
            }
        },
        "/auth/register": {
            "post": {
                "summary": "Creates a new user",
                "requestBody": {
                    "description": "User to add",
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/user-full"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "user object"
                    },
                    "400": {
                        "description": "Invalid payload."
                    }
                }
            }
        },
        "/auth/login": {
            "post": {
                "summary": "Logs a user in",
                "requestBody": {
                    "description": "User to log in",
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/user"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Successfully logged in"
                    },
                    "400": {
                        "description": "Invalid payload."
                    },
                    "401": {
                        "description": "You do not have permission to do that."
                    },
                    "500": {
                        "description": "Try again"
                    }
                }
            }
        },
        "/auth/status": {
            "get": {
                "summary": "Returns the logged in user's status",
                "security": [
                    {
                        "bearerAuth": []
                    }
                ],
                "responses": {
                    "200": {
                        "description": "user object"
                    }
                }
            }
        },
        "/auth/logout": {
            "get": {
                "summary": "Logs a user out",
                "security": [
                    {
                        "bearerAuth": []
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully logged out"
                    }
                }
            }
        },
    },
    "components": {
        "securitySchemes": {
            "bearerAuth": {
                "type": "http",
                "scheme": "bearer"
            }
        },
        "schemas": {
            "user": {
                "properties": {
                    "email": {
                        "type": "string"
                    },
                    "password": {
                        "type": "string"
                    }
                }
            },
            "user-full": {
                "properties": {
                    "username": {
                        "type": "string"
                    },
                    "email": {
                        "type": "string"
                    },
                    "password": {
                        "type": "string"
                    }
                }
            }
        }
    }
}
